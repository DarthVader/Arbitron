USE [Arbitron]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- select top 100 * from order_book
/*

*/
-- select * from [dbo].[order_book] order by insert_date desc, ts desc
/*

declare @json varchar(max) = '{"exchange": "poloniex", "pair": "DASH/USDT", "timestamp": 1536253335, "orderbook": {"bids": [[173.00000001, 90.518], [173.0, 8.13461502], [171.82525709, 231.50347075], [171.82525708, 47.13351837], [171.8252569,
33.116], [171.47134267, 331.16001], [171.47134266, 0.08570015], [171.44669499, 1.3210334], [170.63442695, 0.00586576], [170.0, 0.5], [169.94728905, 70.61012898], [168.78453788, 165.58], [166.03917752, 165.58], [165.9282142, 0.00614723], [165.52729956, 0.21158347], [165.0, 30.06060606], [164.072948, 165.58], [163.0, 6.2673838], [162.25314, 0.07488223], [162.0, 0.5617284], [160.50597999, 0.3], [160.0, 0.01425006], [159.75285, 0.07472053], [159.0, 0.12578616], [157.54318012, 0.06347466], [157.19817711, 0.26887287], [157.17147322, 1.08162122], [157.0, 1.27388535], [156.6, 0.06732151], [156.26, 3.66382204], [155.65095, 0.06129339], [155.50597999, 0.2], [155.2221, 1.0], [155.2, 0.11955898], [154.90761616, 0.50418729], [154.77992248, 82.45707582], [154.71420243, 0.14049847], [154.4085352, 2.39418232], [153.6542, 1.0], [153.40537615, 0.0076032], [152.23275576, 2.04035077], [152.0863, 1.0], [152.0, 0.07761742], [151.0, 0.09933775], [150.5184, 1.0], [150.50597999, 0.2], [150.32320632, 1.0], [150.0, 46.61850007], [148.96201, 4.51470175], [148.9505, 1.0]], "asks": [[174.41971528, 26.144], [174.41971529, 8.7858], [174.41979999, 10.656], [174.55758379, 2.7472008], [174.61151485, 30.16867208], [174.66493596, 89.40406725], [174.66493597, 33.116], [175.3, 20.0], [175.40902549, 0.08421019], [175.50614225, 0.05043588], [176.46620401, 228.73138551], [176.46620402, 331.16], [176.46620404, 0.09116731], [177.60197583, 0.19992], [177.7721, 0.00568559], [177.7997, 0.00569663], [177.8565, 0.00578149], [177.8733, 0.00578433], [177.9971, 0.00578689], [178.4920558, 156.44376], [178.72784, 0.07513253], [180.0, 0.68837516], [181.63234159, 1.1229335], [182.207, 0.00552918], [182.3071, 0.00552313], [182.40021, 2.0543863], [183.27246653, 0.00551092], [184.38293368, 0.56573565], [184.97237, 0.05678315], [185.01791859, 0.00545893], [185.2, 1.26134277], [186.7733, 0.00539892], [186.78176486, 0.19464134], [186.83214, 0.07546055], [187.63609668, 0.00538275], [187.77912486, 0.07170683], [188.0136, 0.00535549], [188.1927, 0.00535605], [188.3545, 0.00535702], [188.5065, 0.00536173], [190.0, 10.29646873], [190.5, 0.01364764], [190.99118007, 2.54453398], [191.12700081, 0.00528444], [192.0, 0.016], [192.57693716, 2.29559834], [192.62, 10.0], [192.99118007, 2.0], [193.56468317, 1.05370999], [194.0, 4.99500001]], "timestamp": null, "datetime": null, "nonce": null}}'

exec dbo.save_order_book_json @json
go
select * from [mem].[order_book]

*/
-- see: https://docs.microsoft.com/en-us/sql/relational-databases/in-memory-oltp/faster-temp-table-and-table-variable-by-using-memory-optimization?view=sql-server-2017

drop procedure if exists dbo.save_order_book_json 
go
CREATE procedure dbo.save_order_book_json (@json as varchar(max))
--with native_compilation, schemabinding   
as 
begin 
--	atomic with (TRANSACTION ISOLATION LEVEL = SNAPSHOT, LANGUAGE = N'russian')  
/*	
 delete from mem.order_book where id_ex_pair=212
 ALTER TABLE mem.order_book SET (SYSTEM_VERSIONING = OFF); 
 go
 delete from dbo.order_book
 go
 ALTER TABLE mem.order_book SET (SYSTEM_VERSIONING = ON (HISTORY_TABLE = dbo.order_book, DATA_CONSISTENCY_CHECK = ON));
 go
 select * from dbo.order_book
 select * from mem.order_book where id_ex_pair=212
*/
/*	
	 declare @tmp as dbo.order_book_type;

	INSERT INTO @tmp
			   ([id_ex_pair]
			   ,[dt]
			   ,[is_bid]
			   ,[price]
			   ,[amount])
*/
/*
declare @json varchar(max) = '{"exchange": "poloniex", "pair": "DASH/USDT", "timestamp": 1536253335, "orderbook": {"bids": [[173.00000001, 90.518], [173.0, 8.13461502], [171.82525709, 231.50347075], [171.82525708, 47.13351837], [171.8252569,
34.116], [171.47134267, 331.16001], [171.47134266, 0.08570015], [171.44669499, 1.3210334], [170.63442695, 0.00586576], [170.0, 0.5], [169.94728905, 70.61012898], [168.78453788, 165.58], [166.03917752, 165.58], [165.9282142, 0.00614723], [165.52729956, 0.21158347], [165.0, 30.06060606], [164.072948, 165.58], [163.0, 6.2673838], [162.25314, 0.07488223], [162.0, 0.5617284], [160.50597999, 0.3], [160.0, 0.01425006], [159.75285, 0.07472053], [159.0, 0.12578616], [157.54318012, 0.06347466], [157.19817711, 0.26887287], [157.17147322, 1.08162122], [157.0, 1.27388535], [156.6, 0.06732151], [156.26, 3.66382204], [155.65095, 0.06129339], [155.50597999, 0.2], [155.2221, 1.0], [155.2, 0.11955898], [154.90761616, 0.50418729], [154.77992248, 82.45707582], [154.71420243, 0.14049847], [154.4085352, 2.39418232], [153.6542, 1.0], [153.40537615, 0.0076032], [152.23275576, 2.04035077], [152.0863, 1.0], [152.0, 0.07761742], [151.0, 0.09933775], [150.5184, 1.0], [150.50597999, 0.2], [150.32320632, 1.0], [150.0, 46.61850007], [148.96201, 4.51470175], [148.9505, 1.0]], "asks": [[174.41971528, 26.144], [174.41971529, 8.7858], [174.41979999, 10.656], [174.55758379, 2.7472008], [174.61151485, 30.16867208], [174.66493596, 89.40406725], [174.66493597, 33.116], [175.3, 20.0], [175.40902549, 0.08421019], [175.50614225, 0.05043588], [176.46620401, 228.73138551], [176.46620402, 331.16], [176.46620404, 0.09116731], [177.60197583, 0.19992], [177.7721, 0.00568559], [177.7997, 0.00569663], [177.8565, 0.00578149], [177.8733, 0.00578433], [177.9971, 0.00578689], [178.4920558, 156.44376], [178.72784, 0.07513253], [180.0, 0.68837516], [181.63234159, 1.1229335], [182.207, 0.00552918], [182.3071, 0.00552313], [182.40021, 2.0543863], [183.27246653, 0.00551092], [184.38293368, 0.56573565], [184.97237, 0.05678315], [185.01791859, 0.00545893], [185.2, 1.26134277], [186.7733, 0.00539892], [186.78176486, 0.19464134], [186.83214, 0.07546055], [187.63609668, 0.00538275], [187.77912486, 0.07170683], [188.0136, 0.00535549], [188.1927, 0.00535605], [188.3545, 0.00535702], [188.5065, 0.00536173], [190.0, 10.29646873], [190.5, 0.01364764], [190.99118007, 2.54453398], [191.12700081, 0.00528444], [192.0, 0.016], [192.57693716, 2.29559834], [192.62, 10.0], [192.99118007, 2.0], [193.56468317, 1.05370999], [194.0, 4.99500001]], "timestamp": null, "datetime": null, "nonce": null}}'

declare @json varchar(max) = '{"exchange": "hitbtc2", "pair": "ETH/USDT", "timestamp": 1537322307, "orderbook": {"bids": [[211.48, 0.01], [211.44, 0.1], [211.41, 3.2], [211.4, 0.002], [211.39, 0.085], [211.38, 0.504], [211.36, 5.0], [211.35, 0.558], [211.34, 14.992], [211.31, 3.515], [211.3, 0.002], [211.28, 0.224], [211.27, 14.99], [211.26, 3.2], [211.21, 32.78], [211.2, 0.002], [211.19, 0.396], [211.18, 6.0], [211.15, 0.3], [211.14, 0.009], [211.1, 0.002], [211.08, 0.592], [211.01, 0.18], [211.0, 0.033], [210.98, 0.81], [210.96, 6.0], [210.9, 0.002], [210.88, 1.045], [210.8, 0.002], [210.77, 1.297], [210.7, 0.002], [210.69, 189.144], [210.68, 1.664], [210.6, 0.002], [210.58, 1.844], [210.5, 0.002], [210.48, 1.0], [210.47, 1.0], [210.44, 17.307], [210.41, 1.0], [210.4, 0.002], [210.3, 0.002], [210.21, 24.3], [210.2, 0.002], [210.04, 46.0], [210.0, 255.928], [209.96, 0.042], [209.85, 0.112], [209.83, 0.19], [209.81, 0.211], [209.8, 0.068], [209.77, 1.455], [209.75, 0.198], [209.72, 0.168], [209.71, 76.0], [209.64, 0.296], [209.6, 17.2], [209.54, 0.405], [209.44, 5.416], [209.43, 0.522], [209.33, 0.648], [209.3, 0.011], [209.26, 0.001], [209.22, 0.782], [209.16, 0.161], [209.12, 0.922], [209.11, 357.019], [209.01, 1.069], [209.0, 0.001], [208.98, 76.0], [208.97, 0.01], [208.94, 0.047], [208.67, 0.499], [208.55, 0.182], [208.33, 1.44], [208.28, 1.733], [208.0, 0.001], [207.91, 0.204], [207.85, 466.236], [207.59, 0.08], [207.55, 0.285], [207.27, 0.192], [207.0, 2.241], [206.95, 0.285], [206.89, 0.285], [206.84, 0.285], [206.82, 0.285], [206.8, 0.285], [206.75, 8.529], [206.65, 5.108], [206.64, 0.222], [206.16, 0.1], [206.15, 17.2], [206.12, 13.211], [206.06,
15.111], [206.0, 2.031], [205.97, 0.229], [205.91, 2.323], [205.62, 13.992], [205.59, 1.221]], "asks": [[211.53, 3.0], [211.55, 4.0], [211.56, 11.616], [211.57, 0.3], [211.59, 0.546], [211.6, 5.3], [211.68, 5.0], [211.69, 14.999], [211.72, 14.992], [211.73, 2.0], [211.89, 0.1], [212.03, 0.069], [212.05, 29.967], [212.06, 3.201], [212.09, 5.999], [212.24, 0.162], [212.26, 0.285], [212.31, 57.6], [212.37, 5.996], [212.39, 15.0], [212.45, 1.811], [212.47, 0.01], [212.5, 0.002], [212.6, 0.002], [212.7, 0.002], [212.75, 0.032], [212.76, 46.0], [212.8, 0.012], [212.84, 0.007], [212.86, 189.144], [212.9, 0.002], [213.0, 38.946], [213.01, 0.165], [213.05, 0.34], [213.06, 1.009], [213.08, 76.0], [213.1, 0.002], [213.12, 0.1], [213.2, 0.002], [213.26, 0.007], [213.3, 0.042], [213.32, 1.312], [213.4, 0.002], [213.49, 0.001], [213.5, 0.002], [213.55, 0.05], [213.6, 0.002], [213.62, 255.897], [213.68, 0.007], [213.7, 0.002], [213.71, 0.157], [213.76, 5.008], [213.8, 0.042], [213.83, 36.275], [213.85, 0.009], [213.88, 12.806], [213.9, 0.002], [213.94, 0.072], [214.0, 9.792], [214.01, 76.0], [214.05, 1.182], [214.1, 0.009], [214.18, 0.1], [214.2, 0.002], [214.26, 0.009], [214.28, 0.18], [214.3, 0.002], [214.35, 36.233], [214.36, 0.002], [214.4, 0.002], [214.41, 0.04], [214.51, 1.506], [214.52, 0.007], [214.55, 0.009], [214.67, 36.234], [214.68, 357.025], [214.73, 0.022], [214.75, 2.503], [214.78, 17.1], [214.86, 3.56], [214.93, 0.006], [214.94, 0.007], [214.99, 0.029], [215.0, 6.511], [215.01, 0.009], [215.17, 0.006], [215.26, 0.012], [215.36, 0.007], [215.41, 0.006], [215.59, 0.202], [215.65, 0.006], [215.78, 0.02], [215.83, 0.007], [215.87, 466.236], [215.89, 0.006], [216.0, 2.013], [216.13, 0.006], [216.17, 8.0], [216.21, 0.007], [216.23, 0.18]], "timestamp": null, "datetime": null, "nonce": null}}'
*/
	

	select --top 100 percent
		--(select eid from exchanges where id=exchange) exchange_id,
		--pair, 
		--(select sid from tokens where symbol=substring(pair, 1, CHARINDEX('/', pair)-1)) id_fsym,
		--(select sid from tokens where symbol=substring(pair, CHARINDEX('/', pair)+1, len(pair))) id_tsym,
		--fsym.sid id_fsym,
		--tsym.sid id_tsym,
		i.id_ex_pair,
		d.dt, 
		x.is_bid, --'bid' side, 
		x.price, 
		x.amount  --GETUTCDATE() insert_date, [timestamp], ts, @exchange, @pair, price, amount, [type]
	into #tmp
	from  
		OPENJSON(@json,'$')
		with (
			exchange varchar(12) '$.exchange',
			pair varchar(12) '$.pair',
			ts bigint '$.timestamp'
		) ep
		cross apply (
			select 1 is_bid, price, amount 
			from OPENJSON(@json,'$.orderbook.bids')  -- BIDS
					with (
						price  float '$[0]',
						amount float '$[1]'
						 )  t
			union all 
			select 0 is_bid, price, amount 
			from OPENJSON(@json,'$.orderbook.asks')  -- ASKS
					with (
						price  float '$[0]',
						amount float '$[1]'
						 )  t
		 ) x
		cross apply (select id_ex_pair, exchange, pair from mem.exchanges_pairs i where ep.exchange=i.exchange and ep.pair=i.pair) i
		cross apply (SELECT DATEADD(second, ts, CAST('1970-01-01 00:00:00' AS datetime)) dt) d
		--cross apply (select sid from mem.tokens where symbol=substring(pair, 1, CHARINDEX('/', pair)-1) ) fsym
		--cross apply (select sid from mem.tokens where symbol=substring(pair, CHARINDEX('/', pair)+1, len(pair))) tsym
		
	;
	insert into mem.order_book(
				[id_ex_pair]
			   ,[dt]
			   ,[is_bid]
			   ,[price]
			   ,[amount])

	select		[id_ex_pair]
			   ,[dt]
			   ,[is_bid]
			   ,[price]
			   ,[amount]
	from #tmp i
	where not exists (	select 1 from mem.order_book o 
						where 1=1 
						and o.id_ex_pair=i.id_ex_pair
						and o.is_bid=i.is_bid
						and o.price=i.price 
						and o.amount=i.amount)
	;
	/*
	delete mem.order_book
	from mem.order_book 
	left join @tmp i on 1=1
						and mem.order_book.id_ex_pair=i.id_ex_pair
						and mem.order_book.is_bid=i.is_bid
						and mem.order_book.price=i.price 
						and mem.order_book.amount=i.amount
	where mem.order_book.id is null
	*/
	delete mem.order_book
	where not exists (	select 1 from #tmp i
						where 1=1 
						and mem.order_book.id_ex_pair=i.id_ex_pair
						and mem.order_book.is_bid=i.is_bid
						and mem.order_book.price=i.price 
						and mem.order_book.amount=i.amount)
	

	-- return @@ROWCOUNT
end
GO



grant exec on mem.save_order_book_json to [Workers]
grant exec on dbo.save_order_book_json to [Workers]